%This program is free software; you can redistribute it and/or
%modify it under the terms of the GNU General Public License.
%
%This program is distributed in the hope that it will be useful,
%but WITHOUT ANY WARRANTY; without even the implied warranty of
%MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%GNU General Public License for more details.
%

%  This function takes user-specified files for the MATLAB variables
%  generated by earlier functions for the small RNA sequence reads and the
%  genome sequence.  The user must specify both the file name and the
%  variable name for each.  The user must also specifiy a boolean variable
%  as to whether or not they want to allow G-U base pairs without penalty
%  between the putative miRNA and putative miRNA* sequences.  This function
%  should be run twice for each experiement, once for the small RNA
%  sequence reads, and once for the known miRNAs.  This function runs
%  through all the positions of all the small RNA sequence reads and tries
%  to discover a potential miRNA* star sequence with at most one bulge of
%  maximum length 2 with user specified cutoffs for the maximum number of
%  mismatches, the minimum miRNA:miRNA* duplex loop length, and the length
%  of the window to be searched for a potential miRNA* (the maximum duplex
%  loop length).  The function scores local alignments of the small RNA
%  sequence read with all possible miRNA* sequences, and records only
%  whether at least one sequence meets the user's criteria.  It returns a
%  modified small RNA sequence read variable that has a vector of boolean
%  values equal in size to the number of regions a small RNA sequence maps
%  to in the genome.  A false value indicates no detected putative miRNA*
%  sequence, while a true value indicates at least one putative miRNA*
%  detected.


%MAXIMUM_BULGE = 1, MAXMIUM_BULGE_LENGTH = 2;
function [reads] = computeStarStrand(sequenceFileName, sequenceVariableName, genomeFileName, genomeVariableName, ALLOW_GU, MAXIMUM_MISMATCHES, MINIMUM_LOOP_SIZE, WINDOW_SIZE)
reads = load(sequenceFileName, sequenceVariableName);
reads = reads.(genomeVariableName);
genome = load(genomeFileName, genomeVariableName);
genome = genome.(genomeVariableName);

if (ALLOW_GU)
    %Allow G-U:
    scoringMatrix = [0    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1     0    -1    -1    -1     1    -1     1     1    -1    -1    -1    -1    -1    -1
                    -1    -1     0     0     1    -1     1    -1     1    -1    -1    -1    -1    -1    -1
                    -1    -1     0     0    -1     1     1    -1    -1     1    -1    -1    -1    -1    -1
                    -1    -1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1     1    -1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1     1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1     1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1];
else
    %Don't allow G-U:
    scoringMatrix = [0    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1     0    -1    -1    -1     1    -1     1     1    -1    -1    -1    -1    -1    -1
                    -1    -1     0    -1     1    -1     1    -1     1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1     0    -1     1     1    -1    -1     1    -1    -1    -1    -1    -1
                    -1    -1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1     1    -1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1     1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1     1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1     1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1
                    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1    -1];
end

for i=1:length(reads)
    reads(i).stars = false(1, length(reads(i).positions));
end

%Finished allocating

for i=1:length(reads)
    CURRENTSIZE = reads(i).length;%hardcode it in for simplicity of modifying/complexity of understanding...
    for j=1:length(reads(i).positions)
        currentSeq = genome(reads(i).Xsomes(j)).Sequence(reads(i).positions(j):reads(i).positions(j)+CURRENTSIZE-1);
        windowStart = reads(i).positions(j) - WINDOW_SIZE;
        windowEnd = reads(i).positions(j) + CURRENTSIZE + WINDOW_SIZE;
        if (windowStart < 1)
            windowStart = 1;
        end
        if (windowEnd > length(genome(reads(i).Xsomes(j)).Sequence))
            windowEnd = length(genome(reads(i).Xsomes(j)).Sequence);
        end
        foundStar = false;
        %Try align part 1 of 3, no gaps:
        bestScore = -Inf;
        for k=windowStart:reads(i).positions(j)-CURRENTSIZE-MINIMUM_LOOP_SIZE
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE-1));
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 10000);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        for k=reads(i).positions(j)+CURRENTSIZE+MINIMUM_LOOP_SIZE:windowEnd-CURRENTSIZE
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE-1));
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 10000);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        if (bestScore >= MAXIMUM_MISMATCHES * -1)
            foundStar = true;
        end
        %Try align part 2.1 of 3, gaps in miRNA*, not miRNA (gap size = 1):
        bestScore = -Inf;
        for k=windowStart:reads(i).positions(j)-CURRENTSIZE-MINIMUM_LOOP_SIZE-1%add a "-1" to compensate for the longer sequence length
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE));%remove the -1 to make it 1 nt longer
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 100);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        for k=reads(i).positions(j)+CURRENTSIZE+MINIMUM_LOOP_SIZE:windowEnd-CURRENTSIZE-1%add a "-1" to compensate for the longer sequence length
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE));%remove the -1 to make it 1 nt longer
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 100);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        if (bestScore >= -100 + MAXIMUM_MISMATCHES * -1)
            foundStar = true;
        end
        %Try align part 2.2 of 3, gaps in miRNA*, not miRNA (gap size = 2):
        bestScore = -Inf;
        for k=windowStart:reads(i).positions(j)-CURRENTSIZE-MINIMUM_LOOP_SIZE-2%add a "-2" to compensate for the longer sequence length
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE+1));%change the -1 to +1 to make it 2 nt longer
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 100, 'ExtendGap', 50);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        for k=reads(i).positions(j)+CURRENTSIZE+MINIMUM_LOOP_SIZE:windowEnd-CURRENTSIZE-2%add a "-2" to compensate for the longer sequence length
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE+1));%change the -1 to +1 to make it 2 nt longer
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 100, 'ExtendGap', 50);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        if (bestScore >= -150 + MAXIMUM_MISMATCHES * -1)
            foundStar = true;
        end
        %Try align part 3.1 of 3, gaps in miRNA, not miRNA* (gap size = 1):
        bestScore = -Inf;
        for k=windowStart:reads(i).positions(j)-CURRENTSIZE-MINIMUM_LOOP_SIZE+1%add a "+1" to compensate for the shorter sequence length
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE-2));%change the -1 to -2 to make it 1 nt shorter
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 100);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        for k=reads(i).positions(j)+CURRENTSIZE+MINIMUM_LOOP_SIZE:windowEnd-CURRENTSIZE+1%add a "+1" to compensate for the shorter sequence length
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE-2));%change the -1 to -2 to make it 1 nt shorter
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 100);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        if (bestScore >= -100 + MAXIMUM_MISMATCHES * -1)
            foundStar = true;
        end
        %Try align part 3.2 of 3, gaps in miRNA, not miRNA* (gap size = 2):
        bestScore = -Inf;
        for k=windowStart:reads(i).positions(j)-CURRENTSIZE-MINIMUM_LOOP_SIZE+2%add a "+2" to compensate for the shorter sequence length
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE-3));%change the -1 to -3 to make it 2 nt shorter
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 100, 'ExtendGap', 50);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        for k=reads(i).positions(j)+CURRENTSIZE+MINIMUM_LOOP_SIZE:windowEnd-CURRENTSIZE+2%add a "+2" to compensate for the shorter sequence length
            alignSeq = seqreverse(genome(reads(i).Xsomes(j)).Sequence(k:k+CURRENTSIZE-3));%change the -1 to -3 to make it 2 nt shorter
            currentScore = nwalign(currentSeq, alignSeq, 'Alphabet', 'NT', 'ScoringMatrix', scoringMatrix, 'GapOpen', 100, 'ExtendGap', 50);
            if (currentScore > bestScore)
                bestScore = currentScore;
            end
        end
        if (bestScore >= -150 + MAXIMUM_MISMATCHES * -1)
            foundStar = true;
        end

        %Done finding if there's a miRNA* sequence:
        if (foundStar)
            reads(i).stars(j) = true;
        end
    end
end